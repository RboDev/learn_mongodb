
db.air_routes.aggregate([
    {$lookup: {
      from: "air_alliances",
      localField: "airline.name",
      foreignField: "airlines",
      as: "alliance"
    }},
    {$match:{
        "alliance.name":"OneWorld"
    }},
    {$lookup:{
        from: "air_airlines",
        localField: "airline.iata",
        foreignField: "iata",
        as: "airline"
    }},
    {$match: {
        "airline.country":{$in:["Germany", "Spain", "Canada"]}
    }},
    /**
     * from: The target collection.
     * startWith: Expression to start.
     * connectFromField: Field to connect.
     * connectToField: Field to connect to.
     * as: Name of the array field.
     * maxDepth: Optional max recursion depth.
     * depthField: Optional Name of the depth field.
     * restrictSearchWithMatch: Optional query.
     */
    $graphLookup: {
      from: 'air_routes',
      startWith: "$airline.base",
      connectFromField: 'src_airport',
      connectToField: 'dst_airport',
      as: 'destinations',
      maxDepth: "1",
    }

]).itcount()

// Best answer 

// This pipeline takes the most selective collection first, air_alliances, 
// matching the document refering to the OneWorld alliance.
db.air_alliances.aggregate([{
  $match: { name: "OneWorld" }
},
// It then iterates, with maxDepth 0 on the air_airlines collection to collect the details on the airlines, 
// specially their base airport, but restricting that $lookup to airlines of the requested countries [Spain, Germany, Canada], 
// using restrictSearchWithMatch. 
{
  $graphLookup: {
    startWith: "$airlines",
    from: "air_airlines",
    connectFromField: "name",
    connectToField: "name",
    as: "airlines",
    maxDepth: 0,
    restrictSearchWithMatch: {
      country: { $in: ["Germany", "Spain", "Canada"] }  // Nice restrict the nodes to explore
    }
  }
}, 
// We then iterate over all routes up to maximum of one layover by setting our maxDepth to 1. 
// We find all possible destinations when departing from the base airport of each carrier 
// by specify $airlines.base in startWith
{
  $graphLookup: {
    startWith: "$airlines.base",
    from: "air_routes",
    connectFromField: "dst_airport",
    connectToField: "src_airport",
    as: "connections",
    maxDepth: 1
  }
}, 
// We now have a document with a field named connections that is an array of all routes that are within 1 layover. 
// We use a $project here to remove unnecessary information from the documents. 
// We also need to include information about valid airlines that match our initial restriction and the name of the current airline.
{
  $project: {
    validAirlines: "$airlines.name",
    "connections.dst_airport": 1,
    "connections.airline.name": 1
  }
},
{ $unwind: "$connections" },
// {
//   $project: {
//     isValid: { $in: ["$connections.airline.name", "$validAirlines"] },
//     "connections.dst_airport": 1
//   }
// },
// { $match: { isValid: true } },
// { $group: { _id: "$connections.dst_airport" } }
])

