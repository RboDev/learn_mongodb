use("sample_airbnb");

// Find all documents that have Wifi as one of the amenities. Only include price and address in the resulting cursor.
db.listingsAndReviews.find(
    { "amenities": "Wifi" },
    { "price": 1, "address": 1, "_id": 0 }).pretty()

// Using the aggregation framework find all documents that have Wifi as one of the amenities``*. Only include* ``price and address in the resulting cursor.
db.listingsAndReviews.aggregate(
    [
        { "$match": { "amenities": "Wifi" } },
        { "$project": { "price": 1,
                        "address": 1,
                        "_id": 0 }}
    ]).pretty()

// Find one document in the collection and only include the address field in the resulting cursor.
db.listingsAndReviews.findOne({ },{ "address": 1, "_id": 0 })

// Project only the address field value for each document, then group all documents into one document per address.country value.
db.listingsAndReviews.aggregate([ { "$project": { "address": 1, "_id": 0 }},
                                  { "$group": { "_id": "$address.country" }}])

// Project only the address field value for each document, then group all documents into one document per address.country value, and count one for each document in each group.
db.listingsAndReviews.aggregate([
                                  { "$project": { "address": 1, "_id": 0 }},
                                  { "$group": { "_id": "$address.country",
                                                "count": { "$sum": 1 } } }
                                ])

// What room types are present in the sample_airbnb.listingsAndReviews collection?
use("sample_airbnb")

// db.listingsAndReviews.aggregate([
//     { "$project": {"room_type":1, "_id":0}},
//     { "$group": {"_id":"$room_type"}}
// ])

// in fact project is optional here

db.listingsAndReviews.aggregate([ { "$group": { "_id": "$room_type" } }])


// === .sort().limit() ===
use("sample_training") 

db.zips.find().sort({ "pop": 1 }).limit(1)

db.zips.find({ "pop": 0 }).count()

db.zips.find().sort({ "pop": -1 }).limit(1)

db.zips.find().sort({ "pop": -1 }).limit(10)

db.zips.find().sort({ "pop": 1, "city": -1 })
