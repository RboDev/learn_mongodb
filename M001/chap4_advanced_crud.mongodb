// Using the sample_airbnb.listingsAndReviews collection find out how many documents 
// have the "property_type" "House", and include "Changing table" as one of the "amenities"?
use("sample_airbnb")
db.listingsAndReviews.find({"property_type":"House","amenities":"Changing table"}).count() 

// Which of the following queries will return all listings that have 
// "Free parking on premises", "Air conditioning", and "Wifi" as part of their amenities, 
// and have at least 2 bedrooms in the sample_airbnb.listingsAndReviews collection?

use("sample_airbnb")
db.listingsAndReviews.find({ 
    "amenities": { "$all": [ "Free parking on premises", "Wifi", "Air conditioning" ] },
    "bedrooms": { "$gte":  2 } 
} ).pretty()


//==== Projections ====
use("sample_airbnb");
// Find all documents with exactly 20 amenities which include all the amenities listed in the query array, and display their price and address:
db.listingsAndReviews.find({ "amenities":
        { "$size": 20, "$all": [ "Internet", "Wifi",  "Kitchen", "Heating",
                                 "Family/kid friendly", "Washer", "Dryer",
                                 "Essentials", "Shampoo", "Hangers",
                                 "Hair dryer", "Iron",
                                 "Laptop friendly workspace" ] } },
                            {"price": 1, "address": 1}).pretty()

use("sample_airbnb");
//Find all documents that have Wifi as one of the amenities only include price and address in the resulting cursor:
db.listingsAndReviews.find({ "amenities": "Wifi" },
                           { "price": 1, "address": 1, "_id": 0 }).pretty()

// Find all documents where the student in class 431 received a grade higher than 85 for any type of assignment:
use("sample_training");
db.grades.find({ "class_id": 431 },
               { "scores": { "$elemMatch": { "score": { "$gt": 85 } } }
             }).pretty()

// Find all documents where the student had an extra credit score:
db.grades.find({ "scores": { "$elemMatch": { "type": "extra credit" } }
               }).pretty()

// Find all documents with exactly 20 amenities which include all the amenities 
// listed in the query array, and display their price and address:

use("sample_training");

db.companies.find({
    "offices" : { "$elemMatch": {"city":"Seattle"}}
}).count()

// Which of the following queries will return only the names of companies from 
// the sample_training.companies collection that had exactly 8 funding rounds?
use("sample_training");
db.companies.find({
    "funding_rounds": {"$size" : 8}},
    {"name":1,"_id":0})

// ==== dot notation do dig in the document ====

use("sample_training");
db.companies.find({ "relationships.0.person.last_name": "Zuckerberg" },
                  { "name": 1 }).pretty()

db.companies.find({ "relationships.0.person.first_name": "Mark",
                    "relationships.0.title": { "$regex": "CEO" } },
                  { "name": 1 }).count()

db.companies.find({ "relationships":
                      { "$elemMatch": { "is_past": true,
                                        "person.first_name": "Mark" } } },
                  { "name": 1 }).count()

// How many trips in the sample_training.trips collection started at stations 
// that are to the west of the -74 longitude coordinate?
// Longitude decreases in value as you move west.
// Note: We always list the longitude first and then latitude in the coordinate pairs; i.e.
// <field_name>: [ <longitude>, <latitude> ]
use("sample_training");
db.trips.find({
    "start station location.coordinates.0":{"$lt":-74}
}).count()

// How many inspections from the sample_training.inspections collection 
// were conducted in the city of NEW YORK?
use("sample_training");
db.inspections.find({
    "address.city":"NEW YORK"
}).count()

// Which of the following queries will return the names and addresses of all listings 
// from the sample_airbnb.listingsAndReviews collection 
// where the first amenity in the list is "Internet"?
use("sample_airbnb");
db.listingsAndReviews.find({"amenities.0":"Internet"}, {"name":1, "address":1, "_id":0})

// ==== QUIZZ ====
// Query Operators - Comparison

// 1. How many documents in the sample_training.zips collection have fewer than
//    1000 people listed in the pop field?
use("sample_training")
db.zips.find({"pop":{"$lt":1000}}).count()

// 2. What is the difference between the number of people born in 1998 and the
//    number of people born after 1998 in the sample_training.trips collection?
use("sample_training")
db.trips.find({'birth year':1998}).count() -
db.trips.find({'birth year':{"$gt":1998}}).count()

// 3. Using the sample_training.routes collection find out which of the
//    following statements will return all routes that have at least one stop
//    in them?

//         -  db.routes.find({ "stops": { "$gt": 0 }}).pretty()
//         -  db.routes.find({ "stops": { "$gte": 0 }}).pretty()
//         -  db.routes.find({ "stops": { "$ne": 0 }}).pretty()
//         -  db.routes.find({ "stops": { "$lt": 10 }}).pretty()


// Query Operators - Logic

// 1. How many businesses in the sample_training.inspections dataset have the
//    inspection result "Out of Business" and belong to the Home Improvement
//    Contractor - 100 sector?
use("sample_training")
db.inspections.find({"result":"Out of Business", "sector":"Home Improvement Contractor - 100"}).count()

// 2. How many zips in the sample_training.zips dataset are neither over-
//    populated nor under-populated?
//    In this case, we consider population over 1,000,000 to be over-populated
//    and under 5,000 to be under-populated.
use("sample_training")
db.zips.find({"$nor":[
    {"pop":{"$lt":5000}},
    {"pop":{"$gt":1000000}}
    ]}).count()


// 3. How many companies in the sample_training.companies dataset were either
//    founded in 2004, or in the month of October and either have the social
//    category_code or web category_code?
use("sample_training")

db.companies.find({"$and":[
    {"$or":[{"founded_year":2004},{"founded_month":10}]},
    {"$or":[{"category_code":"social"},{"category_code":"web"}]}
]}).count()

// Expressive Query Operator

// How many companies in the sample_training.companies collection have the same
// permalink as their twitter_username?
use("sample_training")
db.companies.find({"$expr":{"$eq":["$permalink","$twitter_username"]}}).count()

// Array Operators

// 1. What is the name of the listing in the sample_airbnb.listingsAndReviews
//    dataset accommodate more than 6 people and has exactly 50 reviews?
use("sample_airbnb")
db.listingsAndReviews.find({
    "accommodates":{"$gt":6},
    "reviews":{"$size":50}},{"name":1,"_id":0} )


// 2. How many documents have the property_type House, and include Changing
//    table as one of the amenities?
use("sample_airbnb")
db.listingsAndReviews.find({
    "property_type":"House",
    "amenities":"Changing table"
}).count()

// Array Operators and Projection

// How many companies in the sample_training.companies collection have offices
// in the city of Seattle?
use("sample_training")
db.companies.find({"offices.city":"Seattle"}).count()

// Array Operators and Sub-Documents

// 1. Latitude decreases in value as you move west.
//    How many trips in the sample_training.trips collection started at
//    stations that are to the west of the -74 latitude coordinate?
use("sample_training")
db.trips.find({
    "start station location.coordinates.0":{"$lt":-74}
}).count()

// 2. How many inspections from the sample_training.inspections collection were
//    conducted in the city of New York?
use("sample_training")
db.inspections.find({
    "address.city":"NEW YORK"
}).count()
