use("aggregations")

db.movies.find().skip(1000).limit(1)


x_max = 1521105
x_min = 5
min = 1
max = 10

db.movies.aggregate([
  { $match:{
    languages:"English",
    "imdb.rating": {$gte:1},
    "imdb.votes": {$gte:1},
    year: {$gte:1990}
  }},
  { $addFields: {
    scaled_votes : {
    $add: [
      1,
      {
        $multiply: [
          9,
          {
            $divide: [
              { $subtract: ["$imdb.votes", x_min] },
              { $subtract: [x_max, x_min] }
            ]
          }
        ]
      }
    ]
  }
  }},
  {  $addFields: {
    normalized_rating:{
      $divide:[
        {$add: [ "$scaled_votes","$imdb.rating"]},  // OK $avg exists
        2
      ]}
  }},
  {$sort: {normalized_rating:1}},
  {$project:{_id:0, title:1}},
  {$limit:1}
])

// solution
db.movies.aggregate([
  {
    $match: {
      year: { $gte: 1990 },
      languages: { $in: ["English"] },
      "imdb.votes": { $gte: 1 },
      "imdb.rating": { $gte: 1 }
    }
  },
  {
    $project: {
      _id: 0,
      title: 1,
      "imdb.rating": 1,
      "imdb.votes": 1,
      normalized_rating: {
        $avg: [
          "$imdb.rating",
          {
            $add: [
              1,
              {
                $multiply: [
                  9,
                  {
                    $divide: [
                      { $subtract: ["$imdb.votes", 5] },
                      { $subtract: [1521105, 5] }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  },
  { $sort: { normalized_rating: 1 } },
  { $limit: 1 }
])
